
pwm_traffic_lights_US.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  000001e8  2**0
                  ALLOC
  3 .stab         0000060c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000813  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	5c c0       	rjmp	.+184    	; 0xc4 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e5       	ldi	r30, 0x50	; 80
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a4 e6       	ldi	r26, 0x64	; 100
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	22 d0       	rcall	.+68     	; 0x96 <main>
  52:	7c c0       	rjmp	.+248    	; 0x14c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_timers>:
volatile unsigned char mLedBuffer[] = {0,0,0};
unsigned char mLedValues[] = {R_MAX,0,0};

void init_timers()
{
    TIMSK  = (1 << TOIE0);// enable overflow interrupt
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	89 bf       	out	0x39, r24	; 57
    TCCR0B = (1 << CS00); // start timer, no prescale
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	83 bf       	out	0x33, r24	; 51

    //enable interrupts
    sei();
  5e:	78 94       	sei
}
  60:	08 95       	ret

00000062 <delay_seconds>:


uint8_t i = 0;
uint8_t j = 0;
void delay_seconds(uint8_t pSecs)
{
  62:	90 91 68 00 	lds	r25, 0x0068
  66:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  68:	68 ec       	ldi	r22, 0xC8	; 200
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	0d c0       	rjmp	.+26     	; 0x88 <delay_seconds+0x26>
  for(i = 0; i < pSecs; i++)
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	24 ec       	ldi	r18, 0xC4	; 196
  72:	39 e0       	ldi	r19, 0x09	; 9
  74:	fb 01       	movw	r30, r22
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <delay_seconds+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7e:	d1 f7       	brne	.-12     	; 0x74 <delay_seconds+0x12>
  80:	9f 5f       	subi	r25, 0xFF	; 255
  {
      for(j = 0; j < 4; j++)
  82:	94 30       	cpi	r25, 0x04	; 4
  84:	a9 f7       	brne	.-22     	; 0x70 <delay_seconds+0xe>
  86:	4f 5f       	subi	r20, 0xFF	; 255

uint8_t i = 0;
uint8_t j = 0;
void delay_seconds(uint8_t pSecs)
{
  for(i = 0; i < pSecs; i++)
  88:	48 17       	cp	r20, r24
  8a:	88 f3       	brcs	.-30     	; 0x6e <delay_seconds+0xc>
  8c:	90 93 68 00 	sts	0x0068, r25
  90:	40 93 67 00 	sts	0x0067, r20
  {
      for(j = 0; j < 4; j++)
          _delay_ms(250);
  }
}
  94:	08 95       	ret

00000096 <main>:

int main(void){
  96:	1f 93       	push	r17
	//Set LED pins to output
	DDRB |= ALL_LEDS;
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	87 bb       	out	0x17, r24	; 23
volatile unsigned char mLedBuffer[] = {0,0,0};
unsigned char mLedValues[] = {R_MAX,0,0};

void init_timers()
{
    TIMSK  = (1 << TOIE0);// enable overflow interrupt
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	89 bf       	out	0x39, r24	; 57
    TCCR0B = (1 << CS00); // start timer, no prescale
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	83 bf       	out	0x33, r24	; 51

    //enable interrupts
    sei();
  a6:	78 94       	sei
	DDRB |= ALL_LEDS;

	init_timers();

	while (1) {
	      mLedValues[RED_INDEX] = R_MAX;
  a8:	18 ec       	ldi	r17, 0xC8	; 200
  aa:	10 93 60 00 	sts	0x0060, r17
	      delay_seconds(RED_DELAY);
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	d8 df       	rcall	.-80     	; 0x62 <delay_seconds>
	      mLedValues[YELLOW_INDEX] = Y_MAX;
  b2:	10 93 62 00 	sts	0x0062, r17
	      delay_seconds(YELLOW_DELAY);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	d4 df       	rcall	.-88     	; 0x62 <delay_seconds>
	      mLedValues[GREEN_INDEX] = G_MAX;
  ba:	10 93 61 00 	sts	0x0061, r17
	      delay_seconds(GREEN_DELAY);
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	d0 df       	rcall	.-96     	; 0x62 <delay_seconds>
  c2:	f3 cf       	rjmp	.-26     	; 0xaa <main+0x14>

000000c4 <__vector_5>:
/*
 * Timer/Counter overflow interrupt. This is called each time
 * the counter overflows (255 counts/cycles).
 */
ISR(TIM0_OVF_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	// start with all LED's off
    static unsigned char sPortBmask = 0b00000000;
    static unsigned char sCounter = 255;

    //set port pins straight away (no waiting for processing)
    PORTB = sPortBmask;
  d4:	20 91 69 00 	lds	r18, 0x0069
  d8:	28 bb       	out	0x18, r18	; 24

    //this counter will overflow back to 0 after reaching 255.
    //So we end up adjusting the LED states for every 256 interrupts/overflows.
    if(++sCounter == 0)
  da:	90 91 63 00 	lds	r25, 0x0063
  de:	9f 5f       	subi	r25, 0xFF	; 255
  e0:	90 93 63 00 	sts	0x0063, r25
  e4:	99 23       	and	r25, r25
  e6:	79 f4       	brne	.+30     	; 0x106 <__vector_5+0x42>
    {
    	mLedBuffer[RED_INDEX]    = mLedValues[RED_INDEX];
  e8:	80 91 60 00 	lds	r24, 0x0060
  ec:	80 93 64 00 	sts	0x0064, r24
    	mLedBuffer[GREEN_INDEX]  = mLedValues[GREEN_INDEX];
  f0:	80 91 61 00 	lds	r24, 0x0061
  f4:	80 93 65 00 	sts	0x0065, r24
    	mLedBuffer[YELLOW_INDEX] = mLedValues[YELLOW_INDEX];
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	80 93 66 00 	sts	0x0066, r24

        //set all pins to high (all LEDs on)
        sPortBmask |= ALL_LEDS;
 100:	27 60       	ori	r18, 0x07	; 7
 102:	20 93 69 00 	sts	0x0069, r18
    }
    //this loop is considered for every overflow interrupt.
    //this is the software PWM.
    //when an LED's value is reached the LED turned off for the remainder of the PWM cycle
    if(mLedBuffer[RED_INDEX]   == sCounter)   sPortBmask &= ~(1 << RED_LED);
 106:	80 91 64 00 	lds	r24, 0x0064
 10a:	89 17       	cp	r24, r25
 10c:	29 f4       	brne	.+10     	; 0x118 <__vector_5+0x54>
 10e:	80 91 69 00 	lds	r24, 0x0069
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	80 93 69 00 	sts	0x0069, r24
    if(mLedBuffer[GREEN_INDEX] == sCounter)   sPortBmask &= ~(1 << GREEN_LED);
 118:	80 91 65 00 	lds	r24, 0x0065
 11c:	89 17       	cp	r24, r25
 11e:	29 f4       	brne	.+10     	; 0x12a <__vector_5+0x66>
 120:	80 91 69 00 	lds	r24, 0x0069
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	80 93 69 00 	sts	0x0069, r24
    if(mLedBuffer[YELLOW_INDEX]  == sCounter) sPortBmask &= ~(1 << YELLOW_LED);
 12a:	80 91 66 00 	lds	r24, 0x0066
 12e:	89 17       	cp	r24, r25
 130:	29 f4       	brne	.+10     	; 0x13c <__vector_5+0x78>
 132:	80 91 69 00 	lds	r24, 0x0069
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	80 93 69 00 	sts	0x0069, r24
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
